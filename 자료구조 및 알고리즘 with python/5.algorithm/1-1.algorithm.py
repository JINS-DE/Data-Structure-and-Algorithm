'''
# 알고리즘
- 주어진 문제를 해결하기 위한 단계적인 절차를 말한다.
- 컴퓨터에서 어떤 일을 하는 절차를 표현하기 위해 명령어들을 사용하는데, 알고리즘은 특정한 일을 수행하는 명령어들의 집합이다.
    - 명령어(instruction set) : 컴퓨터에서 수행되는 문장들을 의미한다.
- 프로그래밍 언어와 상관없이 문제 해결 절차를 나타내는 명령어의 집합이다. 

# 알고리즘의 조건
- 입력 : 모호하지 않고 잘 정의된 입력
- 명확성 : 각 명령어의 의미가 모호하지 않고 명확해야 한다.
- 언어 독립성 : 프로그래밍 언어와 상관 없다.
- 출력 : 명확히 정의된 1개 이상의 출력
- 유한성 : 한정된 수의 단계 후에는 반드시 종료되어야 한다.
- 유효성 : 명령어들은 현재 실행 가능한 연산이어야 한다.

- 알고리즘 대부분은 입력을 요구하지만 때로는 입력이 필요 없는 경우가 있다.
    - ex) 난수 발생 알고리즘
    - 하지만 반드시 하나 이상의 출력은 있어야 한다.    
'''
'''
알고리즘의 기술 방법
- 영어나 한국어와 같은 자연어를 사용하는 방법

- 흐름도(flowchart)로 표시하는 방법
- 특정한 프로그래밍 언어의 코드로 나타내는 방법
- 유사 코드(peseudo-code)로 기술하는 방법

ex) 3개의 숫자 a,b,c가 주어졌을 때 가장 큰 값을 찾는 문제
1. 자연어 표현 
- 자연어를 사용하면 표현이 자유롭고 편리하다는 장점이 있다.
find max(a,b,c)
    a를 최댓값을 저장하는 변수 max를 복사합니다.
    만약 b가 max보다 크면 b를 max에 복사합니다.
    만약 c가 max보다 크면 c를 max에 복사합니다.
    max를 반환합니다

2. 흐름도 표현
- 흐름도(flowchart)는 알고리즘의 절차들을 가장 정확하게 표현할 수 있어서 특허 명세서 등에서 많이 사용
- but, 알고리즘이 조금만 길어도 그림이 복잡해진다

3.특정 프로그래밍 언어 표현
- 알고리즘을 실행해 볼 수 있어 편리
- 언어의 문법을 정확히 기술해야 한다.
- 간단한 알고리즘도 복잡해 보일 수 있다.

4. 유사코드(pesudo code) 표현
- 자연어보다는 체계적이지만 프로그래밍 언어보다 덜 엄격
- 논문이나 도서들에서 흔히 사용
find_max(a,b,c)
    max <- a
    if b > max then
        max <-b
    if c > max then
        max <- c
    return max

5. 파이썬을 이용한 표현
- 유사코드 표현과 매우 유사하다.
'''